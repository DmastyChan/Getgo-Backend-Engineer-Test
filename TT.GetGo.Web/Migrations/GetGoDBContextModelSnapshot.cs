// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TT.GetGo.Web.Mapping;

#nullable disable

namespace TT.GetGo.Web.Migrations
{
    [DbContext(typeof(GetGoDBContext))]
    partial class GetGoDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("TT.GetGo.Core.Domain.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUTCDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("NoPlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 6)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedIP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUTCDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Car", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "ASTON MARTIN",
                            CarName = "CarA",
                            Color = "Silver",
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1012),
                            Deleted = false,
                            Model = "Cygnet Hatchback 2013",
                            NoPlate = "ABC 1234",
                            Rate = 1.2m,
                            Status = 1,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1013)
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Audi",
                            CarName = "CarB",
                            Color = "Black",
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1033),
                            Deleted = false,
                            Model = "Acura ILX Premium Sedan 2022",
                            NoPlate = "DEF 8517",
                            Rate = 1.7m,
                            Status = 1,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1033)
                        },
                        new
                        {
                            Id = 3,
                            Brand = "BMW",
                            CarName = "CarC",
                            Color = "Black",
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1038),
                            Deleted = false,
                            Model = "BMW 2 Series Coupe 2022",
                            NoPlate = "HIJ 1235",
                            Rate = 1.9m,
                            Status = 1,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1038)
                        },
                        new
                        {
                            Id = 4,
                            Brand = "BMW",
                            CarName = "CarD",
                            Color = "Red",
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1043),
                            Deleted = false,
                            Model = "BMW 2 Series M240i Coupe 2022",
                            NoPlate = "KLM 3435",
                            Rate = 2m,
                            Status = 1,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1044)
                        },
                        new
                        {
                            Id = 5,
                            Brand = "LEXUS",
                            CarName = "CarF",
                            Color = "White",
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1047),
                            Deleted = false,
                            Model = "Lexus IS 300 Sedan 2022",
                            NoPlate = "ZZZ 9999",
                            Rate = 1.2m,
                            Status = 1,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(1048)
                        });
                });

            modelBuilder.Entity("TT.GetGo.Core.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUTCDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeoX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeoY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedIP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUTCDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2892),
                            Deleted = false,
                            GeoX = 2,
                            GeoY = 3,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2894)
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2906),
                            Deleted = false,
                            GeoX = 1,
                            GeoY = 2,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2906)
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2910),
                            Deleted = false,
                            GeoX = 4,
                            GeoY = 5,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2910)
                        },
                        new
                        {
                            Id = 4,
                            CarId = 4,
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2913),
                            Deleted = false,
                            GeoX = 5,
                            GeoY = 6,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2914)
                        },
                        new
                        {
                            Id = 5,
                            CarId = 5,
                            CreatedBy = 1,
                            CreatedIP = "127.0.0.1",
                            CreatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2916),
                            Deleted = false,
                            GeoX = 6,
                            GeoY = 7,
                            UpdatedBy = 1,
                            UpdatedIP = "127.0.0.1",
                            UpdatedUTCDate = new DateTime(2022, 12, 28, 7, 29, 51, 619, DateTimeKind.Utc).AddTicks(2917)
                        });
                });

            modelBuilder.Entity("TT.GetGo.Core.Domain.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUTCDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullMessage")
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("TT.GetGo.Core.Domain.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedIP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUTCDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeoX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeoY")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Hour")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedIP")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedUTCDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isComplete")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Records", (string)null);
                });

            modelBuilder.Entity("TT.GetGo.Core.Domain.Location", b =>
                {
                    b.HasOne("TT.GetGo.Core.Domain.Car", "Car")
                        .WithMany("LocationHistory")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("TT.GetGo.Core.Domain.Record", b =>
                {
                    b.HasOne("TT.GetGo.Core.Domain.Car", "Car")
                        .WithMany("Records")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("TT.GetGo.Core.Domain.Car", b =>
                {
                    b.Navigation("LocationHistory");

                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
